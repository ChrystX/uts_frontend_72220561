@page "/courses"
@using Services
@using Models
@inject NavigationManager Navigation
@inject CourseService CourseService
@inject TokenService TokenService
@rendermode InteractiveServer

<CustomAuthorizeView>
    <h3 class="text-center my-4">Courses List</h3>

    <button @onclick="NavigateToCreateCourse" class="btn btn-primary mb-3">
        Create New Course
    </button>

    <input @bind="searchQuery" placeholder="Enter search term" />
    <button @onclick="SearchCourses">Search</button>

    @if (courses == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!courses.Any())
    {
        <p>No courses available.</p>
    }
    else
    {
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Image</th>
                    <th>Duration (hours)</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in PagedCourses)
                {
                    <tr>
                        <td>@course.Name</td>
                        <td>
                            <img src="@course.ImageName" width="100"
                                onerror="this.onerror=null;this.src='https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';" />
                        </td>
                        <td>@course.Duration</td>
                        <td>@course.Category.Name</td>
                        <td>
                            <button class="btn btn-primary me-1" @onclick="() => NavigateToEdit(course.CourseId)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(course.CourseId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-center align-items-center my-3">
            <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>
            @foreach (var pageNumber in Enumerable.Range(1, TotalPages))
            {
                <button class="btn @(pageNumber == currentPage ? "btn-primary" : "btn-light") me-2"
                        @onclick="() => GoToPage(pageNumber)">
                    @pageNumber
                </button>
            }
            <button class="btn btn-secondary ms-2" @onclick="NextPage" disabled="@IsLastPage">Next</button>
        </div>
    }

    @if (showConfirmation)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this course?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button class="btn btn-danger" @onclick="DeleteConfirmed">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage) && courseIdToDelete == 0)
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
</CustomAuthorizeView>

@code {
    private string searchQuery = string.Empty;
    private List<Course> courses;
    private const int PageSize = 5;
    private int currentPage = 1;
    private string errorMessage = string.Empty;
    private bool showConfirmation = false;
    private int courseIdToDelete;

    private IEnumerable<Course> PagedCourses => courses
        .Skip((currentPage - 1) * PageSize)
        .Take(PageSize);

    private int TotalPages => (int)Math.Ceiling((double)(courses?.Count ?? 0) / PageSize);

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadCoursesAsync();
        if (TokenService.AuthToken == null)
        {
            Navigation.NavigateTo("/login");
        }
    }

    private async Task LoadCoursesAsync()
    {
        try
        {
            courses = await CourseService.GetCoursesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching courses: {ex.Message}";
            courses = new List<Course>();
        }
    }

    private void NavigateToCreateCourse()
    {
        Navigation.NavigateTo("/create-course");
    }

    private async Task SearchCourses()
    {
        courses = await CourseService.SearchCoursesAsync(searchQuery);
    }

    private void ConfirmDelete(int courseId)
    {
        courseIdToDelete = courseId;
        showConfirmation = true;
    }

    private void CancelDelete()
    {
        showConfirmation = false;
    }

    private void NavigateToEdit(int courseId)
    {
        Navigation.NavigateTo($"/edit-course/{courseId}");
    }

    private async Task DeleteConfirmed()
    {
        try
        {
            if (courseIdToDelete == 0)
            {
                errorMessage = "Invalid course ID.";
                return;
            }

            bool success = await CourseService.DeleteCourseAsync(courseIdToDelete);
            if (success)
            {
                courses = courses.Where(c => c.CourseId != courseIdToDelete).ToList();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Failed to delete the course. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting course: {ex.Message}";
        }
        finally
        {
            showConfirmation = false;
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
        }
    }

    private void GoToPage(int page)
    {
        currentPage = page;
    }
}
