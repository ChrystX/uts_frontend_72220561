@page "/create-course"
@using Services
@using Models
@using System.Net // Add this line
@inject CourseService CourseService
@inject CategoryService CategoryService
@inject NavigationManager Navigation
@inject TokenService TokenService
@rendermode InteractiveServer

<h3>Create Course</h3>

<EditForm Model="@course" OnValidSubmit="@HandleValidSubmit" FormName="CourseForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="@course.Name" />
        <ValidationMessage For="@(() => course.Name)" />
    </div>

    <div class="form-group">
        <label for="imageName">Image URL:</label>
        <InputText id="imageName" class="form-control" @bind-Value="@course.ImageName" />
        <ValidationMessage For="@(() => course.ImageName)" />
    </div>

    <div class="form-group">
        <label for="duration">Duration:</label>
        <InputNumber id="duration" class="form-control" @bind-Value="@course.Duration" />
        <ValidationMessage For="@(() => course.Duration)" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@course.Description" />
        <ValidationMessage For="@(() => course.Description)" />
    </div>

    <div class="form-group">
        <label for="categoryId">Category:</label>
        <select id="categoryId" class="form-control" @bind="course.CategoryId">
            <option value="">Select a category</option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryId">@category.Name</option>
            }
        </select>
        <ValidationMessage For="@(() => course.CategoryId)" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@if (isSubmitted)
{
    <div class="alert alert-success" role="alert">
        Course created successfully! Redirecting...
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}

@code {
    [SupplyParameterFromForm(FormName = "CourseForm")]
    private Course course { get; set; } = new Course();
    private List<Category> categories = new List<Category>();
    private bool isSubmitted = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (TokenService.AuthToken == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            categories = await CategoryService.GetCategoriesAsync();
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Forbidden || ex.StatusCode == HttpStatusCode.Unauthorized)
        {
            errorMessage = "You do not have permission to access the categories. Please contact the administrator if you believe this is an error.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching categories: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var success = await CourseService.CreateCourseAsync(course);

            if (success)
            {
                isSubmitted = true;
                course = new Course(); // Reset the course object
                errorMessage = string.Empty;

                // Delay before redirecting to another page (e.g., course list)
                await Task.Delay(2000); // Optional: 2-second delay
                Navigation.NavigateTo("/courses"); // Navigate to the courses list page
            }
            else
            {
                errorMessage = "Error creating the course. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}
